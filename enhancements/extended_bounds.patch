diff --git a/src/engine/math_util.c b/src/engine/math_util.c
index 61a095d..e21777b 100644
--- a/src/engine/math_util.c
+++ b/src/engine/math_util.c
@@ -575,7 +575,9 @@ void mtxf_to_mtx(Mtx *dest, Mat4 src) {
     register f32 *t1 = (f32 *) src;
 
     for (i = 0; i < 16; i++) {
-        asFixedPoint = *t1++ * (1 << 16); //! float-to-integer conversion responsible for PU crashes
+        //asFixedPoint = *t1++ * (1 << 16); //! float-to-integer conversion responsible for PU crashes
+        asFixedPoint = *t1++ * 24576.0; //! float-to-integer conversion responsible for PU crashes
+
         *a3++ = GET_HIGH_S16_OF_32(asFixedPoint); // integer part
         *t0++ = GET_LOW_S16_OF_32(asFixedPoint);  // fraction part
     }
diff --git a/src/engine/surface_collision.c b/src/engine/surface_collision.c
index 7672187..06475c1 100644
--- a/src/engine/surface_collision.c
+++ b/src/engine/surface_collision.c
@@ -10,6 +10,10 @@
 #include "surface_load.h"
 #include "game/object_list_processor.h"
 
+#define BOUNDS_EXTENSION 4.0f
+#define LEVEL_BOUNDARY_EXTENDED_MAX 0x7fff
+
+
 /**************************************************
  *                      WALLS                      *
  **************************************************/
@@ -22,10 +26,10 @@ static s32 find_wall_collisions_from_list(struct SurfaceNode *surfaceNode,
                                           struct WallCollisionData *data) {
     register struct Surface *surf;
     register f32 offset;
-    register f32 radius = data->radius;
-    register f32 x = data->x;
-    register f32 y = data->y + data->offsetY;
-    register f32 z = data->z;
+    register f32 radius = data->radius / BOUNDS_EXTENSION;
+    register f32 x = data->x / BOUNDS_EXTENSION;
+    register f32 y = (data->y + data->offsetY) / BOUNDS_EXTENSION;
+    register f32 z = data->z / BOUNDS_EXTENSION;
     register f32 px, pz;
     register f32 w1, w2, w3;
     register f32 y1, y2, y3;
@@ -139,8 +143,8 @@ static s32 find_wall_collisions_from_list(struct SurfaceNode *surfaceNode,
 
         //! (Wall Overlaps) Because this doesn't update the x and z local variables,
         //  multiple walls can push mario more than is required.
-        data->x += surf->normal.x * (radius - offset);
-        data->z += surf->normal.z * (radius - offset);
+        data->x += surf->normal.x * (radius - offset) * BOUNDS_EXTENSION;
+        data->z += surf->normal.z * (radius - offset) * BOUNDS_EXTENSION;
 
         //! (Unreferenced Walls) Since this only returns the first four walls,
         //  this can lead to wall interaction being missed. Typically unreferenced walls
@@ -187,8 +191,8 @@ s32 find_wall_collisions(struct WallCollisionData *colData) {
     struct SurfaceNode *node;
     s16 cellX, cellZ;
     s32 numCollisions = 0;
-    s16 x = colData->x;
-    s16 z = colData->z;
+    s16 x = colData->x / BOUNDS_EXTENSION;
+    s16 z = colData->z / BOUNDS_EXTENSION;
 
     colData->numWalls = 0;
 
@@ -282,7 +286,7 @@ static struct Surface *find_ceil_from_list(struct SurfaceNode *surfaceNode, s32
             }
 
             // Find the ceil height at the specific point.
-            height = -(x * nx + nz * z + oo) / ny;
+            height = -(x * nx + nz * z + oo) / ny * BOUNDS_EXTENSION;
 
             // Checks for ceiling interaction with a 78 unit buffer.
             //! (Exposed Ceilings) Because any point above a ceiling counts
@@ -317,15 +321,15 @@ f32 find_ceil(f32 posX, f32 posY, f32 posZ, struct Surface **pceil) {
     //! (Parallel Universes) Because position is casted to an s16, reaching higher
     // float locations  can return ceilings despite them not existing there.
     //(Dynamic ceilings will unload due to the range.)
-    x = (s16) posX;
+    x = (s16) posX / BOUNDS_EXTENSION;
     y = (s16) posY;
-    z = (s16) posZ;
+    z = (s16) posZ / BOUNDS_EXTENSION;
     *pceil = NULL;
 
-    if (x <= -LEVEL_BOUNDARY_MAX || x >= LEVEL_BOUNDARY_MAX) {
+    if (x <= -LEVEL_BOUNDARY_EXTENDED_MAX || x >= LEVEL_BOUNDARY_EXTENDED_MAX) {
         return height;
     }
-    if (z <= -LEVEL_BOUNDARY_MAX || z >= LEVEL_BOUNDARY_MAX) {
+    if (z <= -LEVEL_BOUNDARY_EXTENDED_MAX || z >= LEVEL_BOUNDARY_EXTENDED_MAX) {
         return height;
     }
 
@@ -389,7 +393,7 @@ f32 find_floor_height_and_data(f32 xPos, f32 yPos, f32 zPos, struct FloorGeometr
         sFloorGeo.normalX = floor->normal.x;
         sFloorGeo.normalY = floor->normal.y;
         sFloorGeo.normalZ = floor->normal.z;
-        sFloorGeo.originOffset = floor->originOffset;
+        sFloorGeo.originOffset = floor->originOffset * BOUNDS_EXTENSION;
 
         *floorGeo = &sFloorGeo;
     }
@@ -456,7 +460,7 @@ static struct Surface *find_floor_from_list(struct SurfaceNode *surfaceNode, s32
         }
 
         // Find the height of the floor at a given location.
-        height = -(x * nx + nz * z + oo) / ny;
+        height = -(x * nx + nz * z + oo) / ny * BOUNDS_EXTENSION;
         // Checks for floor interaction with a 78 unit buffer.
         if (y - (height + -78.0f) < 0.0f) {
             continue;
@@ -524,16 +528,16 @@ f32 find_floor(f32 xPos, f32 yPos, f32 zPos, struct Surface **pfloor) {
     //! (Parallel Universes) Because position is casted to an s16, reaching higher
     // float locations  can return floors despite them not existing there.
     //(Dynamic floors will unload due to the range.)
-    s16 x = (s16) xPos;
+    s16 x = (s16) xPos / BOUNDS_EXTENSION;
     s16 y = (s16) yPos;
-    s16 z = (s16) zPos;
+    s16 z = (s16) zPos / BOUNDS_EXTENSION;
 
     *pfloor = NULL;
 
-    if (x <= -LEVEL_BOUNDARY_MAX || x >= LEVEL_BOUNDARY_MAX) {
+    if (x <= -LEVEL_BOUNDARY_MAX || x >= LEVEL_BOUNDARY_EXTENDED_MAX) {
         return height;
     }
-    if (z <= -LEVEL_BOUNDARY_MAX || z >= LEVEL_BOUNDARY_MAX) {
+    if (z <= -LEVEL_BOUNDARY_MAX || z >= LEVEL_BOUNDARY_EXTENDED_MAX) {
         return height;
     }
 
diff --git a/src/engine/surface_load.c b/src/engine/surface_load.c
index 2e32ebf..496d302 100644
--- a/src/engine/surface_load.c
+++ b/src/engine/surface_load.c
@@ -15,6 +15,7 @@
 #include "game/object_list_processor.h"
 #include "surface_load.h"
 
+#define BOUNDS_EXTENSION 4.0f
 s32 unused8038BE90;
 
 /**
@@ -313,17 +314,17 @@ static struct Surface *read_surface_data(s16 *vertexData, s16 **vertexIndices) {
     offset2 = 3 * (*vertexIndices)[1];
     offset3 = 3 * (*vertexIndices)[2];
 
-    x1 = *(vertexData + offset1 + 0);
-    y1 = *(vertexData + offset1 + 1);
-    z1 = *(vertexData + offset1 + 2);
+    x1 = *(vertexData + offset1 + 0) / BOUNDS_EXTENSION;
+    y1 = *(vertexData + offset1 + 1) / BOUNDS_EXTENSION;
+    z1 = *(vertexData + offset1 + 2) / BOUNDS_EXTENSION;
 
-    x2 = *(vertexData + offset2 + 0);
-    y2 = *(vertexData + offset2 + 1);
-    z2 = *(vertexData + offset2 + 2);
+    x2 = *(vertexData + offset2 + 0) / BOUNDS_EXTENSION;
+    y2 = *(vertexData + offset2 + 1) / BOUNDS_EXTENSION;
+    z2 = *(vertexData + offset2 + 2) / BOUNDS_EXTENSION;
 
-    x3 = *(vertexData + offset3 + 0);
-    y3 = *(vertexData + offset3 + 1);
-    z3 = *(vertexData + offset3 + 2);
+    x3 = *(vertexData + offset3 + 0) / BOUNDS_EXTENSION;
+    y3 = *(vertexData + offset3 + 1) / BOUNDS_EXTENSION;
+    z3 = *(vertexData + offset3 + 2) / BOUNDS_EXTENSION;
 
     // (v2 - v1) x (v3 - v2)
     nx = (y2 - y1) * (z3 - z2) - (z2 - z1) * (y3 - y2);
diff --git a/src/game/camera.c b/src/game/camera.c
index e0bf05f..f849cf0 100644
--- a/src/game/camera.c
+++ b/src/game/camera.c
@@ -29,6 +29,8 @@
 #include "level_table.h"
 
 #define CBUTTON_MASK (U_CBUTTONS | D_CBUTTONS | L_CBUTTONS | R_CBUTTONS)
+#define BOUNDS_EXTENSION 4.0f
+
 
 /**
  * @file camera.c
@@ -876,6 +878,10 @@ void pan_ahead_of_player(struct Camera *c) {
 }
 
 s16 find_in_bounds_yaw_wdw_bob_thi(Vec3f pos, Vec3f origin, s16 yaw) {
+    // disable bounds restriction when extending level bounds
+#ifdef BOUNDS_EXTENSION
+    return yaw;
+#endif
     switch (gCurrLevelArea) {
         case AREA_WDW_MAIN:
             yaw = clamp_positions_and_find_yaw(pos, origin, 4508.f, -3739.f, 4508.f, -3739.f);
@@ -4428,9 +4434,9 @@ s32 is_behind_surface(Vec3f pos, struct Surface *surf) {
                 (surf->vertex3[2] - surf->vertex2[2]) * (surf->vertex2[0] - surf->vertex1[0]);
     f32 normZ = (surf->vertex2[0] - surf->vertex1[0]) * (surf->vertex3[1] - surf->vertex2[1]) -
                 (surf->vertex3[0] - surf->vertex2[0]) * (surf->vertex2[1] - surf->vertex1[1]);
-    f32 dirX = surf->vertex1[0] - pos[0];
-    f32 dirY = surf->vertex1[1] - pos[1];
-    f32 dirZ = surf->vertex1[2] - pos[2];
+    f32 dirX = surf->vertex1[0] - pos[0] / BOUNDS_EXTENSION;
+    f32 dirY = surf->vertex1[1] - pos[1] / BOUNDS_EXTENSION;
+    f32 dirZ = surf->vertex1[2] - pos[2] / BOUNDS_EXTENSION;
 
     if (dirX * normX + dirY * normY + dirZ * normZ < 0) {
         behindSurface = 1;
diff --git a/src/game/object_helpers.c b/src/game/object_helpers.c
index 42ad0e5..7a2d8af 100644
--- a/src/game/object_helpers.c
+++ b/src/game/object_helpers.c
@@ -1859,12 +1859,12 @@ static s32 cur_obj_within_12k_bounds(void) {
 }
 
 void cur_obj_move_using_vel_and_gravity(void) {
-    if (cur_obj_within_12k_bounds()) {
+    //if (cur_obj_within_12k_bounds()) {
         o->oPosX += o->oVelX;
         o->oPosZ += o->oVelZ;
         o->oVelY += o->oGravity; //! No terminal velocity
         o->oPosY += o->oVelY;
-    }
+    //}
 }
 
 void cur_obj_move_using_fvel_and_gravity(void) {
